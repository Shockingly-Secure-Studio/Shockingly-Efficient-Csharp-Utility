using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Web;

namespace Service.Exploit
{
    public class Wordpress
    {
        public async Task<(bool,string)> IsAWordPress(string url)
        {
            List<Task<(HttpStatusCode, string)>> requests = new List<Task<(HttpStatusCode, string)>>()
            {
                //fuzzing ...
                Request.Ping(url+"/wp-activate.php"),
                Request.Ping(url+"/wp-admin/"),
                Request.Ping(url+"/wp-app.php"),
                Request.Ping(url+"/wp-atom.php"),
                Request.Ping(url+"/wp-blog-header.php"),
                Request.Ping(url+"/wp-comments-post.php"),
                Request.Ping(url+"/wp-commentsrss2.php"),
                Request.Ping(url+"/wp-config-sample.php"),
                Request.Ping(url+"/wp-config.php"),
                Request.Ping(url+"/wp-content/"),
                Request.Ping(url+"/wp-cron.php"),
                Request.Ping(url+"/wp-includes/"),
                Request.Ping(url+"/wp-feed.php"),
                Request.Ping(url+"/wp-links-opml.php"),
                Request.Ping(url+"/wp-load.php"),
                Request.Ping(url+"/wp-login.php"),
                Request.Ping(url+"/wp-mail.php"),
                Request.Ping(url+"/wp-pass.php"),
                Request.Ping(url+"/wp-rdf.php"),
                Request.Ping(url+"/wp-register.php"),
                Request.Ping(url+"/wp-rss2.php"),
                Request.Ping(url+"/wp-rss.php"),
                Request.Ping(url+"/wp-settings.php"),
                Request.Ping(url+"/wp-settings.php"),
                Request.Ping(url+"/wp-signup.php"),
                Request.Ping(url+"/wp-trackback.php"),
                Request.Ping(url+"/xmlrpc.php"),
            };
            
            //let's check the res
            while (requests.Count != 0)
            {
                Task<(HttpStatusCode, string)> result = await Task.WhenAny(requests);
                (HttpStatusCode, string) res = result.Result;
                if (res.Item1 is HttpStatusCode.OK)
                {
                    return (true,url);
                }

                requests.Remove(result);
            }

            return (false,url);
        }

        private static void WPscanPriv(string url,int cores)
        {
            if (!Utils.IsProgrammInstalled("ruby"))
            {
                return;
            }

            if (!Utils.IsProgrammInstalled("wpscan"))
            {
                Utils.Exec("gem install wpscan");
            }
            else
            {
                Utils.Exec("wpscan --update");
            }
            
            string outputDir = Path.Combine("Results", url, "Wpscanres");
            string usernamesDir = Path.Combine("Binaries","usernames.txt");
            string passwordsDir = Path.Combine("Binaries", "passwords.txt");
            Utils.Exec("wpscan " + url + " --random-agent --usernames "+usernamesDir+" --passwords "+passwordsDir+" threads ["+cores+"] --nobanner  -o "+ outputDir);
        }

        public async Task Wpscan(List<string> urls)
        {
            //get all the wp urls
            List<string> WpUrl = new List<string>();
            List<Task< (bool,string)>> tasks = new List<Task<(bool,string)>>();
            foreach (var url in urls)
            {
                tasks.Add(IsAWordPress(url));
            }

            while (tasks.Count != 0)
            {
                Task<(bool, string)> res = await Task.WhenAny(tasks) as Task<(bool, string)>;
                (bool,string) IsWp = res.Result;
                if (IsWp.Item1)
                {
                    WpUrl.Add(IsWp.Item2);
                }

                tasks.Remove(res);
            }
            
            //calculation of the numbers of cores
            int totalcores = Environment.ProcessorCount;
            //cores used by wpscan
            int cores = 1;
            if (totalcores/WpUrl.Count > 1)
            {
                cores = totalcores / WpUrl.Count;
            }
            //multithreading
            Parallel.ForEach(WpUrl, (url =>
            {
                WPscanPriv(url,cores);
            }));
        }
    }
}